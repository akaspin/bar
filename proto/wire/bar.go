// Autogenerated by Thrift Compiler (1.0.0-dev)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package wire

import (
	"bytes"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

type Bar interface { //Wire service
	//

	GetInfo() (r *ServerInfo, err error)
	// Creates new upload on bard and returns missing chunks.
	//
	//
	// Parameters:
	//  - Id: upload id (UUIDv4)
	//  - Manifests: requested manifests
	//  - Ttl: upload TTL
	CreateUpload(id []byte, manifests []*Manifest, ttl int64) (r [][]byte, err error)
	// Upload BLOB chunk
	//
	//
	// Parameters:
	//  - UploadId: upload id
	//  - ChunkId: chunk id
	//  - Body: Chunk body
	UploadChunk(uploadId []byte, chunkId ID, body []byte) (err error)
	// Mark upload as finished. This action will
	// immediately remove all upload data.
	//
	//
	// Parameters:
	//  - UploadId: Upload id
	FinishUpload(uploadId []byte) (err error)
	// Tag blobs. Untagged blobs will be removed by GC.
	//
	//
	// Parameters:
	//  - Ids
	GetMissingBlobIds(ids [][]byte) (r [][]byte, err error)
	// Get manifests by their ids
	//
	//
	// Parameters:
	//  - Ids
	GetManifests(ids [][]byte) (r []*Manifest, err error)
	// Fetch chunk from bard
	//
	//
	// Parameters:
	//  - BlobID: Blob ID
	//  - Chunk: Chunk spec
	FetchChunk(blobID ID, chunk *Chunk) (r []byte, err error)
	// Parameters:
	//  - Spec
	UploadSpec(spec *Spec) (err error)
	// Parameters:
	//  - Id
	FetchSpec(id ID) (r *Spec, err error)
}

//Wire service
//
type BarClient struct {
	Transport       thrift.TTransport
	ProtocolFactory thrift.TProtocolFactory
	InputProtocol   thrift.TProtocol
	OutputProtocol  thrift.TProtocol
	SeqId           int32
}

func NewBarClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *BarClient {
	return &BarClient{Transport: t,
		ProtocolFactory: f,
		InputProtocol:   f.GetProtocol(t),
		OutputProtocol:  f.GetProtocol(t),
		SeqId:           0,
	}
}

func NewBarClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *BarClient {
	return &BarClient{Transport: t,
		ProtocolFactory: nil,
		InputProtocol:   iprot,
		OutputProtocol:  oprot,
		SeqId:           0,
	}
}

func (p *BarClient) GetInfo() (r *ServerInfo, err error) {
	if err = p.sendGetInfo(); err != nil {
		return
	}
	return p.recvGetInfo()
}

func (p *BarClient) sendGetInfo() (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("GetInfo", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := BarGetInfoArgs{}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *BarClient) recvGetInfo() (value *ServerInfo, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "GetInfo" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "GetInfo failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "GetInfo failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error5 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error6 error
		error6, err = error5.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error6
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "GetInfo failed: invalid message type")
		return
	}
	result := BarGetInfoResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Creates new upload on bard and returns missing chunks.
//
//
// Parameters:
//  - Id: upload id (UUIDv4)
//  - Manifests: requested manifests
//  - Ttl: upload TTL
func (p *BarClient) CreateUpload(id []byte, manifests []*Manifest, ttl int64) (r [][]byte, err error) {
	if err = p.sendCreateUpload(id, manifests, ttl); err != nil {
		return
	}
	return p.recvCreateUpload()
}

func (p *BarClient) sendCreateUpload(id []byte, manifests []*Manifest, ttl int64) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("CreateUpload", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := BarCreateUploadArgs{
		Id:        id,
		Manifests: manifests,
		Ttl:       ttl,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *BarClient) recvCreateUpload() (value [][]byte, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "CreateUpload" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "CreateUpload failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "CreateUpload failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error7 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error8 error
		error8, err = error7.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error8
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "CreateUpload failed: invalid message type")
		return
	}
	result := BarCreateUploadResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Upload BLOB chunk
//
//
// Parameters:
//  - UploadId: upload id
//  - ChunkId: chunk id
//  - Body: Chunk body
func (p *BarClient) UploadChunk(uploadId []byte, chunkId ID, body []byte) (err error) {
	if err = p.sendUploadChunk(uploadId, chunkId, body); err != nil {
		return
	}
	return p.recvUploadChunk()
}

func (p *BarClient) sendUploadChunk(uploadId []byte, chunkId ID, body []byte) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("UploadChunk", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := BarUploadChunkArgs{
		UploadId: uploadId,
		ChunkId:  chunkId,
		Body:     body,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *BarClient) recvUploadChunk() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "UploadChunk" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "UploadChunk failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "UploadChunk failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error9 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error10 error
		error10, err = error9.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error10
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "UploadChunk failed: invalid message type")
		return
	}
	result := BarUploadChunkResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	return
}

// Mark upload as finished. This action will
// immediately remove all upload data.
//
//
// Parameters:
//  - UploadId: Upload id
func (p *BarClient) FinishUpload(uploadId []byte) (err error) {
	if err = p.sendFinishUpload(uploadId); err != nil {
		return
	}
	return p.recvFinishUpload()
}

func (p *BarClient) sendFinishUpload(uploadId []byte) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("FinishUpload", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := BarFinishUploadArgs{
		UploadId: uploadId,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *BarClient) recvFinishUpload() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "FinishUpload" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "FinishUpload failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "FinishUpload failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error11 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error12 error
		error12, err = error11.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error12
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "FinishUpload failed: invalid message type")
		return
	}
	result := BarFinishUploadResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	return
}

// Tag blobs. Untagged blobs will be removed by GC.
//
//
// Parameters:
//  - Ids
func (p *BarClient) GetMissingBlobIds(ids [][]byte) (r [][]byte, err error) {
	if err = p.sendGetMissingBlobIds(ids); err != nil {
		return
	}
	return p.recvGetMissingBlobIds()
}

func (p *BarClient) sendGetMissingBlobIds(ids [][]byte) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("GetMissingBlobIds", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := BarGetMissingBlobIdsArgs{
		Ids: ids,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *BarClient) recvGetMissingBlobIds() (value [][]byte, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "GetMissingBlobIds" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "GetMissingBlobIds failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "GetMissingBlobIds failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error13 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error14 error
		error14, err = error13.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error14
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "GetMissingBlobIds failed: invalid message type")
		return
	}
	result := BarGetMissingBlobIdsResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Get manifests by their ids
//
//
// Parameters:
//  - Ids
func (p *BarClient) GetManifests(ids [][]byte) (r []*Manifest, err error) {
	if err = p.sendGetManifests(ids); err != nil {
		return
	}
	return p.recvGetManifests()
}

func (p *BarClient) sendGetManifests(ids [][]byte) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("GetManifests", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := BarGetManifestsArgs{
		Ids: ids,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *BarClient) recvGetManifests() (value []*Manifest, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "GetManifests" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "GetManifests failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "GetManifests failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error15 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error16 error
		error16, err = error15.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error16
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "GetManifests failed: invalid message type")
		return
	}
	result := BarGetManifestsResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Fetch chunk from bard
//
//
// Parameters:
//  - BlobID: Blob ID
//  - Chunk: Chunk spec
func (p *BarClient) FetchChunk(blobID ID, chunk *Chunk) (r []byte, err error) {
	if err = p.sendFetchChunk(blobID, chunk); err != nil {
		return
	}
	return p.recvFetchChunk()
}

func (p *BarClient) sendFetchChunk(blobID ID, chunk *Chunk) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("FetchChunk", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := BarFetchChunkArgs{
		BlobID: blobID,
		Chunk:  chunk,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *BarClient) recvFetchChunk() (value []byte, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "FetchChunk" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "FetchChunk failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "FetchChunk failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error17 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error18 error
		error18, err = error17.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error18
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "FetchChunk failed: invalid message type")
		return
	}
	result := BarFetchChunkResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Spec
func (p *BarClient) UploadSpec(spec *Spec) (err error) {
	if err = p.sendUploadSpec(spec); err != nil {
		return
	}
	return p.recvUploadSpec()
}

func (p *BarClient) sendUploadSpec(spec *Spec) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("UploadSpec", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := BarUploadSpecArgs{
		Spec: spec,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *BarClient) recvUploadSpec() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "UploadSpec" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "UploadSpec failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "UploadSpec failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error19 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error20 error
		error20, err = error19.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error20
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "UploadSpec failed: invalid message type")
		return
	}
	result := BarUploadSpecResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	return
}

// Parameters:
//  - Id
func (p *BarClient) FetchSpec(id ID) (r *Spec, err error) {
	if err = p.sendFetchSpec(id); err != nil {
		return
	}
	return p.recvFetchSpec()
}

func (p *BarClient) sendFetchSpec(id ID) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("FetchSpec", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := BarFetchSpecArgs{
		Id: id,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *BarClient) recvFetchSpec() (value *Spec, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "FetchSpec" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "FetchSpec failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "FetchSpec failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error21 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error22 error
		error22, err = error21.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error22
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "FetchSpec failed: invalid message type")
		return
	}
	result := BarFetchSpecResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

type BarProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      Bar
}

func (p *BarProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *BarProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *BarProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewBarProcessor(handler Bar) *BarProcessor {

	self23 := &BarProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self23.processorMap["GetInfo"] = &barProcessorGetInfo{handler: handler}
	self23.processorMap["CreateUpload"] = &barProcessorCreateUpload{handler: handler}
	self23.processorMap["UploadChunk"] = &barProcessorUploadChunk{handler: handler}
	self23.processorMap["FinishUpload"] = &barProcessorFinishUpload{handler: handler}
	self23.processorMap["GetMissingBlobIds"] = &barProcessorGetMissingBlobIds{handler: handler}
	self23.processorMap["GetManifests"] = &barProcessorGetManifests{handler: handler}
	self23.processorMap["FetchChunk"] = &barProcessorFetchChunk{handler: handler}
	self23.processorMap["UploadSpec"] = &barProcessorUploadSpec{handler: handler}
	self23.processorMap["FetchSpec"] = &barProcessorFetchSpec{handler: handler}
	return self23
}

func (p *BarProcessor) Process(iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x24 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x24.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return false, x24

}

type barProcessorGetInfo struct {
	handler Bar
}

func (p *barProcessorGetInfo) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := BarGetInfoArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetInfo", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := BarGetInfoResult{}
	var retval *ServerInfo
	var err2 error
	if retval, err2 = p.handler.GetInfo(); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetInfo: "+err2.Error())
		oprot.WriteMessageBegin("GetInfo", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetInfo", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type barProcessorCreateUpload struct {
	handler Bar
}

func (p *barProcessorCreateUpload) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := BarCreateUploadArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("CreateUpload", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := BarCreateUploadResult{}
	var retval [][]byte
	var err2 error
	if retval, err2 = p.handler.CreateUpload(args.Id, args.Manifests, args.Ttl); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing CreateUpload: "+err2.Error())
		oprot.WriteMessageBegin("CreateUpload", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("CreateUpload", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type barProcessorUploadChunk struct {
	handler Bar
}

func (p *barProcessorUploadChunk) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := BarUploadChunkArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("UploadChunk", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := BarUploadChunkResult{}
	var err2 error
	if err2 = p.handler.UploadChunk(args.UploadId, args.ChunkId, args.Body); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing UploadChunk: "+err2.Error())
		oprot.WriteMessageBegin("UploadChunk", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	}
	if err2 = oprot.WriteMessageBegin("UploadChunk", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type barProcessorFinishUpload struct {
	handler Bar
}

func (p *barProcessorFinishUpload) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := BarFinishUploadArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("FinishUpload", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := BarFinishUploadResult{}
	var err2 error
	if err2 = p.handler.FinishUpload(args.UploadId); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing FinishUpload: "+err2.Error())
		oprot.WriteMessageBegin("FinishUpload", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	}
	if err2 = oprot.WriteMessageBegin("FinishUpload", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type barProcessorGetMissingBlobIds struct {
	handler Bar
}

func (p *barProcessorGetMissingBlobIds) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := BarGetMissingBlobIdsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetMissingBlobIds", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := BarGetMissingBlobIdsResult{}
	var retval [][]byte
	var err2 error
	if retval, err2 = p.handler.GetMissingBlobIds(args.Ids); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetMissingBlobIds: "+err2.Error())
		oprot.WriteMessageBegin("GetMissingBlobIds", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetMissingBlobIds", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type barProcessorGetManifests struct {
	handler Bar
}

func (p *barProcessorGetManifests) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := BarGetManifestsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetManifests", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := BarGetManifestsResult{}
	var retval []*Manifest
	var err2 error
	if retval, err2 = p.handler.GetManifests(args.Ids); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetManifests: "+err2.Error())
		oprot.WriteMessageBegin("GetManifests", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetManifests", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type barProcessorFetchChunk struct {
	handler Bar
}

func (p *barProcessorFetchChunk) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := BarFetchChunkArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("FetchChunk", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := BarFetchChunkResult{}
	var retval []byte
	var err2 error
	if retval, err2 = p.handler.FetchChunk(args.BlobID, args.Chunk); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing FetchChunk: "+err2.Error())
		oprot.WriteMessageBegin("FetchChunk", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("FetchChunk", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type barProcessorUploadSpec struct {
	handler Bar
}

func (p *barProcessorUploadSpec) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := BarUploadSpecArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("UploadSpec", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := BarUploadSpecResult{}
	var err2 error
	if err2 = p.handler.UploadSpec(args.Spec); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing UploadSpec: "+err2.Error())
		oprot.WriteMessageBegin("UploadSpec", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	}
	if err2 = oprot.WriteMessageBegin("UploadSpec", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type barProcessorFetchSpec struct {
	handler Bar
}

func (p *barProcessorFetchSpec) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := BarFetchSpecArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("FetchSpec", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := BarFetchSpecResult{}
	var retval *Spec
	var err2 error
	if retval, err2 = p.handler.FetchSpec(args.Id); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing FetchSpec: "+err2.Error())
		oprot.WriteMessageBegin("FetchSpec", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("FetchSpec", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

// HELPER FUNCTIONS AND STRUCTURES

type BarGetInfoArgs struct {
}

func NewBarGetInfoArgs() *BarGetInfoArgs {
	return &BarGetInfoArgs{}
}

func (p *BarGetInfoArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *BarGetInfoArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetInfo_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *BarGetInfoArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BarGetInfoArgs(%+v)", *p)
}

// Attributes:
//  - Success
type BarGetInfoResult struct {
	Success *ServerInfo `thrift:"success,0" json:"success,omitempty"`
}

func NewBarGetInfoResult() *BarGetInfoResult {
	return &BarGetInfoResult{}
}

var BarGetInfoResult_Success_DEFAULT *ServerInfo

func (p *BarGetInfoResult) GetSuccess() *ServerInfo {
	if !p.IsSetSuccess() {
		return BarGetInfoResult_Success_DEFAULT
	}
	return p.Success
}
func (p *BarGetInfoResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *BarGetInfoResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *BarGetInfoResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &ServerInfo{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *BarGetInfoResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetInfo_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *BarGetInfoResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *BarGetInfoResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BarGetInfoResult(%+v)", *p)
}

// Attributes:
//  - Id: upload id (UUIDv4)
//  - Manifests: requested manifests
//  - Ttl: upload TTL
type BarCreateUploadArgs struct {
	Id        []byte      `thrift:"id,1" json:"id"`
	Manifests []*Manifest `thrift:"manifests,2" json:"manifests"`
	Ttl       int64       `thrift:"ttl,3" json:"ttl"`
}

func NewBarCreateUploadArgs() *BarCreateUploadArgs {
	return &BarCreateUploadArgs{}
}

func (p *BarCreateUploadArgs) GetId() []byte {
	return p.Id
}

func (p *BarCreateUploadArgs) GetManifests() []*Manifest {
	return p.Manifests
}

func (p *BarCreateUploadArgs) GetTtl() int64 {
	return p.Ttl
}
func (p *BarCreateUploadArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *BarCreateUploadArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Id = v
	}
	return nil
}

func (p *BarCreateUploadArgs) readField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*Manifest, 0, size)
	p.Manifests = tSlice
	for i := 0; i < size; i++ {
		_elem25 := &Manifest{}
		if err := _elem25.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem25), err)
		}
		p.Manifests = append(p.Manifests, _elem25)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *BarCreateUploadArgs) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Ttl = v
	}
	return nil
}

func (p *BarCreateUploadArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("CreateUpload_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *BarCreateUploadArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("id", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err)
	}
	if err := oprot.WriteBinary(p.Id); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err)
	}
	return err
}

func (p *BarCreateUploadArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("manifests", thrift.LIST, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:manifests: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Manifests)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Manifests {
		if err := v.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:manifests: ", p), err)
	}
	return err
}

func (p *BarCreateUploadArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ttl", thrift.I64, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ttl: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.Ttl)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.ttl (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ttl: ", p), err)
	}
	return err
}

func (p *BarCreateUploadArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BarCreateUploadArgs(%+v)", *p)
}

// Attributes:
//  - Success
type BarCreateUploadResult struct {
	Success [][]byte `thrift:"success,0" json:"success,omitempty"`
}

func NewBarCreateUploadResult() *BarCreateUploadResult {
	return &BarCreateUploadResult{}
}

var BarCreateUploadResult_Success_DEFAULT [][]byte

func (p *BarCreateUploadResult) GetSuccess() [][]byte {
	return p.Success
}
func (p *BarCreateUploadResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *BarCreateUploadResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *BarCreateUploadResult) readField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([][]byte, 0, size)
	p.Success = tSlice
	for i := 0; i < size; i++ {
		var _elem26 []byte
		if v, err := iprot.ReadBinary(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem26 = v
		}
		p.Success = append(p.Success, _elem26)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *BarCreateUploadResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("CreateUpload_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *BarCreateUploadResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.Success)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.Success {
			if err := oprot.WriteBinary(v); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *BarCreateUploadResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BarCreateUploadResult(%+v)", *p)
}

// Attributes:
//  - UploadId: upload id
//  - ChunkId: chunk id
//  - Body: Chunk body
type BarUploadChunkArgs struct {
	UploadId []byte `thrift:"uploadId,1" json:"uploadId"`
	ChunkId  ID     `thrift:"chunkId,2" json:"chunkId"`
	Body     []byte `thrift:"body,3" json:"body"`
}

func NewBarUploadChunkArgs() *BarUploadChunkArgs {
	return &BarUploadChunkArgs{}
}

func (p *BarUploadChunkArgs) GetUploadId() []byte {
	return p.UploadId
}

func (p *BarUploadChunkArgs) GetChunkId() ID {
	return p.ChunkId
}

func (p *BarUploadChunkArgs) GetBody() []byte {
	return p.Body
}
func (p *BarUploadChunkArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *BarUploadChunkArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.UploadId = v
	}
	return nil
}

func (p *BarUploadChunkArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		temp := ID(v)
		p.ChunkId = temp
	}
	return nil
}

func (p *BarUploadChunkArgs) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Body = v
	}
	return nil
}

func (p *BarUploadChunkArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("UploadChunk_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *BarUploadChunkArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("uploadId", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:uploadId: ", p), err)
	}
	if err := oprot.WriteBinary(p.UploadId); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.uploadId (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:uploadId: ", p), err)
	}
	return err
}

func (p *BarUploadChunkArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("chunkId", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:chunkId: ", p), err)
	}
	if err := oprot.WriteBinary(p.ChunkId); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.chunkId (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:chunkId: ", p), err)
	}
	return err
}

func (p *BarUploadChunkArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("body", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:body: ", p), err)
	}
	if err := oprot.WriteBinary(p.Body); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.body (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:body: ", p), err)
	}
	return err
}

func (p *BarUploadChunkArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BarUploadChunkArgs(%+v)", *p)
}

type BarUploadChunkResult struct {
}

func NewBarUploadChunkResult() *BarUploadChunkResult {
	return &BarUploadChunkResult{}
}

func (p *BarUploadChunkResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *BarUploadChunkResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("UploadChunk_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *BarUploadChunkResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BarUploadChunkResult(%+v)", *p)
}

// Attributes:
//  - UploadId: Upload id
type BarFinishUploadArgs struct {
	UploadId []byte `thrift:"uploadId,1" json:"uploadId"`
}

func NewBarFinishUploadArgs() *BarFinishUploadArgs {
	return &BarFinishUploadArgs{}
}

func (p *BarFinishUploadArgs) GetUploadId() []byte {
	return p.UploadId
}
func (p *BarFinishUploadArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *BarFinishUploadArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.UploadId = v
	}
	return nil
}

func (p *BarFinishUploadArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("FinishUpload_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *BarFinishUploadArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("uploadId", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:uploadId: ", p), err)
	}
	if err := oprot.WriteBinary(p.UploadId); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.uploadId (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:uploadId: ", p), err)
	}
	return err
}

func (p *BarFinishUploadArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BarFinishUploadArgs(%+v)", *p)
}

type BarFinishUploadResult struct {
}

func NewBarFinishUploadResult() *BarFinishUploadResult {
	return &BarFinishUploadResult{}
}

func (p *BarFinishUploadResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *BarFinishUploadResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("FinishUpload_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *BarFinishUploadResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BarFinishUploadResult(%+v)", *p)
}

// Attributes:
//  - Ids
type BarGetMissingBlobIdsArgs struct {
	Ids [][]byte `thrift:"ids,1" json:"ids"`
}

func NewBarGetMissingBlobIdsArgs() *BarGetMissingBlobIdsArgs {
	return &BarGetMissingBlobIdsArgs{}
}

func (p *BarGetMissingBlobIdsArgs) GetIds() [][]byte {
	return p.Ids
}
func (p *BarGetMissingBlobIdsArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *BarGetMissingBlobIdsArgs) readField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([][]byte, 0, size)
	p.Ids = tSlice
	for i := 0; i < size; i++ {
		var _elem27 []byte
		if v, err := iprot.ReadBinary(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem27 = v
		}
		p.Ids = append(p.Ids, _elem27)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *BarGetMissingBlobIdsArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetMissingBlobIds_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *BarGetMissingBlobIdsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ids", thrift.LIST, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ids: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.Ids)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Ids {
		if err := oprot.WriteBinary(v); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ids: ", p), err)
	}
	return err
}

func (p *BarGetMissingBlobIdsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BarGetMissingBlobIdsArgs(%+v)", *p)
}

// Attributes:
//  - Success
type BarGetMissingBlobIdsResult struct {
	Success [][]byte `thrift:"success,0" json:"success,omitempty"`
}

func NewBarGetMissingBlobIdsResult() *BarGetMissingBlobIdsResult {
	return &BarGetMissingBlobIdsResult{}
}

var BarGetMissingBlobIdsResult_Success_DEFAULT [][]byte

func (p *BarGetMissingBlobIdsResult) GetSuccess() [][]byte {
	return p.Success
}
func (p *BarGetMissingBlobIdsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *BarGetMissingBlobIdsResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *BarGetMissingBlobIdsResult) readField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([][]byte, 0, size)
	p.Success = tSlice
	for i := 0; i < size; i++ {
		var _elem28 []byte
		if v, err := iprot.ReadBinary(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem28 = v
		}
		p.Success = append(p.Success, _elem28)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *BarGetMissingBlobIdsResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetMissingBlobIds_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *BarGetMissingBlobIdsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.Success)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.Success {
			if err := oprot.WriteBinary(v); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *BarGetMissingBlobIdsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BarGetMissingBlobIdsResult(%+v)", *p)
}

// Attributes:
//  - Ids
type BarGetManifestsArgs struct {
	Ids [][]byte `thrift:"ids,1" json:"ids"`
}

func NewBarGetManifestsArgs() *BarGetManifestsArgs {
	return &BarGetManifestsArgs{}
}

func (p *BarGetManifestsArgs) GetIds() [][]byte {
	return p.Ids
}
func (p *BarGetManifestsArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *BarGetManifestsArgs) readField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([][]byte, 0, size)
	p.Ids = tSlice
	for i := 0; i < size; i++ {
		var _elem29 []byte
		if v, err := iprot.ReadBinary(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem29 = v
		}
		p.Ids = append(p.Ids, _elem29)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *BarGetManifestsArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetManifests_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *BarGetManifestsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ids", thrift.LIST, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ids: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.Ids)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Ids {
		if err := oprot.WriteBinary(v); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ids: ", p), err)
	}
	return err
}

func (p *BarGetManifestsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BarGetManifestsArgs(%+v)", *p)
}

// Attributes:
//  - Success
type BarGetManifestsResult struct {
	Success []*Manifest `thrift:"success,0" json:"success,omitempty"`
}

func NewBarGetManifestsResult() *BarGetManifestsResult {
	return &BarGetManifestsResult{}
}

var BarGetManifestsResult_Success_DEFAULT []*Manifest

func (p *BarGetManifestsResult) GetSuccess() []*Manifest {
	return p.Success
}
func (p *BarGetManifestsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *BarGetManifestsResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *BarGetManifestsResult) readField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*Manifest, 0, size)
	p.Success = tSlice
	for i := 0; i < size; i++ {
		_elem30 := &Manifest{}
		if err := _elem30.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem30), err)
		}
		p.Success = append(p.Success, _elem30)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *BarGetManifestsResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetManifests_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *BarGetManifestsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.Success {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *BarGetManifestsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BarGetManifestsResult(%+v)", *p)
}

// Attributes:
//  - BlobID: Blob ID
//  - Chunk: Chunk spec
type BarFetchChunkArgs struct {
	BlobID ID     `thrift:"blobID,1" json:"blobID"`
	Chunk  *Chunk `thrift:"chunk,2" json:"chunk"`
}

func NewBarFetchChunkArgs() *BarFetchChunkArgs {
	return &BarFetchChunkArgs{}
}

func (p *BarFetchChunkArgs) GetBlobID() ID {
	return p.BlobID
}

var BarFetchChunkArgs_Chunk_DEFAULT *Chunk

func (p *BarFetchChunkArgs) GetChunk() *Chunk {
	if !p.IsSetChunk() {
		return BarFetchChunkArgs_Chunk_DEFAULT
	}
	return p.Chunk
}
func (p *BarFetchChunkArgs) IsSetChunk() bool {
	return p.Chunk != nil
}

func (p *BarFetchChunkArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *BarFetchChunkArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := ID(v)
		p.BlobID = temp
	}
	return nil
}

func (p *BarFetchChunkArgs) readField2(iprot thrift.TProtocol) error {
	p.Chunk = &Chunk{}
	if err := p.Chunk.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Chunk), err)
	}
	return nil
}

func (p *BarFetchChunkArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("FetchChunk_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *BarFetchChunkArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("blobID", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:blobID: ", p), err)
	}
	if err := oprot.WriteBinary(p.BlobID); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.blobID (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:blobID: ", p), err)
	}
	return err
}

func (p *BarFetchChunkArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("chunk", thrift.STRUCT, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:chunk: ", p), err)
	}
	if err := p.Chunk.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Chunk), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:chunk: ", p), err)
	}
	return err
}

func (p *BarFetchChunkArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BarFetchChunkArgs(%+v)", *p)
}

// Attributes:
//  - Success
type BarFetchChunkResult struct {
	Success []byte `thrift:"success,0" json:"success,omitempty"`
}

func NewBarFetchChunkResult() *BarFetchChunkResult {
	return &BarFetchChunkResult{}
}

var BarFetchChunkResult_Success_DEFAULT []byte

func (p *BarFetchChunkResult) GetSuccess() []byte {
	return p.Success
}
func (p *BarFetchChunkResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *BarFetchChunkResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *BarFetchChunkResult) readField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = v
	}
	return nil
}

func (p *BarFetchChunkResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("FetchChunk_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *BarFetchChunkResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteBinary(p.Success); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *BarFetchChunkResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BarFetchChunkResult(%+v)", *p)
}

// Attributes:
//  - Spec
type BarUploadSpecArgs struct {
	Spec *Spec `thrift:"spec,1" json:"spec"`
}

func NewBarUploadSpecArgs() *BarUploadSpecArgs {
	return &BarUploadSpecArgs{}
}

var BarUploadSpecArgs_Spec_DEFAULT *Spec

func (p *BarUploadSpecArgs) GetSpec() *Spec {
	if !p.IsSetSpec() {
		return BarUploadSpecArgs_Spec_DEFAULT
	}
	return p.Spec
}
func (p *BarUploadSpecArgs) IsSetSpec() bool {
	return p.Spec != nil
}

func (p *BarUploadSpecArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *BarUploadSpecArgs) readField1(iprot thrift.TProtocol) error {
	p.Spec = &Spec{}
	if err := p.Spec.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Spec), err)
	}
	return nil
}

func (p *BarUploadSpecArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("UploadSpec_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *BarUploadSpecArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("spec", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:spec: ", p), err)
	}
	if err := p.Spec.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Spec), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:spec: ", p), err)
	}
	return err
}

func (p *BarUploadSpecArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BarUploadSpecArgs(%+v)", *p)
}

type BarUploadSpecResult struct {
}

func NewBarUploadSpecResult() *BarUploadSpecResult {
	return &BarUploadSpecResult{}
}

func (p *BarUploadSpecResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *BarUploadSpecResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("UploadSpec_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *BarUploadSpecResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BarUploadSpecResult(%+v)", *p)
}

// Attributes:
//  - Id
type BarFetchSpecArgs struct {
	Id ID `thrift:"id,1" json:"id"`
}

func NewBarFetchSpecArgs() *BarFetchSpecArgs {
	return &BarFetchSpecArgs{}
}

func (p *BarFetchSpecArgs) GetId() ID {
	return p.Id
}
func (p *BarFetchSpecArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *BarFetchSpecArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := ID(v)
		p.Id = temp
	}
	return nil
}

func (p *BarFetchSpecArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("FetchSpec_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *BarFetchSpecArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("id", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err)
	}
	if err := oprot.WriteBinary(p.Id); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err)
	}
	return err
}

func (p *BarFetchSpecArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BarFetchSpecArgs(%+v)", *p)
}

// Attributes:
//  - Success
type BarFetchSpecResult struct {
	Success *Spec `thrift:"success,0" json:"success,omitempty"`
}

func NewBarFetchSpecResult() *BarFetchSpecResult {
	return &BarFetchSpecResult{}
}

var BarFetchSpecResult_Success_DEFAULT *Spec

func (p *BarFetchSpecResult) GetSuccess() *Spec {
	if !p.IsSetSuccess() {
		return BarFetchSpecResult_Success_DEFAULT
	}
	return p.Success
}
func (p *BarFetchSpecResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *BarFetchSpecResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *BarFetchSpecResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &Spec{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *BarFetchSpecResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("FetchSpec_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *BarFetchSpecResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *BarFetchSpecResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BarFetchSpecResult(%+v)", *p)
}
