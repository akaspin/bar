// Autogenerated by Thrift Compiler (1.0.0-dev)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package main

import (
	"flag"
	"fmt"
	"github.com/akaspin/bar/proto/wire"
	"github.com/apache/thrift/lib/go/thrift"
	"math"
	"net"
	"net/url"
	"os"
	"strconv"
	"strings"
)

func Usage() {
	fmt.Fprintln(os.Stderr, "Usage of ", os.Args[0], " [-h host:port] [-u url] [-f[ramed]] function [arg1 [arg2...]]:")
	flag.PrintDefaults()
	fmt.Fprintln(os.Stderr, "\nFunctions:")
	fmt.Fprintln(os.Stderr, "  ServerInfo GetInfo()")
	fmt.Fprintln(os.Stderr, "   CreateUpload(string id,  manifests)")
	fmt.Fprintln(os.Stderr, "  void UploadChunk(ID uploadId, DataInfo info, string body)")
	fmt.Fprintln(os.Stderr, "  void FinishUploadBlob(string uploadId, ID blobId,  tags)")
	fmt.Fprintln(os.Stderr, "  void FinishUpload(string uploadId)")
	fmt.Fprintln(os.Stderr, "  void TagBlobs( ids,  tags)")
	fmt.Fprintln(os.Stderr, "  void UntagBlobs( ids,  tags)")
	fmt.Fprintln(os.Stderr, "   IsBlobExists( ids)")
	fmt.Fprintln(os.Stderr, "   GetManifests( ids)")
	fmt.Fprintln(os.Stderr, "  string FetchChunk(ID blobID, Chunk chunk)")
	fmt.Fprintln(os.Stderr, "  void UploadSpec(Spec spec)")
	fmt.Fprintln(os.Stderr, "  Spec FetchSpec(ID id)")
	fmt.Fprintln(os.Stderr)
	os.Exit(0)
}

func main() {
	flag.Usage = Usage
	var host string
	var port int
	var protocol string
	var urlString string
	var framed bool
	var useHttp bool
	var parsedUrl url.URL
	var trans thrift.TTransport
	_ = strconv.Atoi
	_ = math.Abs
	flag.Usage = Usage
	flag.StringVar(&host, "h", "localhost", "Specify host and port")
	flag.IntVar(&port, "p", 9090, "Specify port")
	flag.StringVar(&protocol, "P", "binary", "Specify the protocol (binary, compact, simplejson, json)")
	flag.StringVar(&urlString, "u", "", "Specify the url")
	flag.BoolVar(&framed, "framed", false, "Use framed transport")
	flag.BoolVar(&useHttp, "http", false, "Use http")
	flag.Parse()

	if len(urlString) > 0 {
		parsedUrl, err := url.Parse(urlString)
		if err != nil {
			fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
			flag.Usage()
		}
		host = parsedUrl.Host
		useHttp = len(parsedUrl.Scheme) <= 0 || parsedUrl.Scheme == "http"
	} else if useHttp {
		_, err := url.Parse(fmt.Sprint("http://", host, ":", port))
		if err != nil {
			fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
			flag.Usage()
		}
	}

	cmd := flag.Arg(0)
	var err error
	if useHttp {
		trans, err = thrift.NewTHttpClient(parsedUrl.String())
	} else {
		portStr := fmt.Sprint(port)
		if strings.Contains(host, ":") {
			host, portStr, err = net.SplitHostPort(host)
			if err != nil {
				fmt.Fprintln(os.Stderr, "error with host:", err)
				os.Exit(1)
			}
		}
		trans, err = thrift.NewTSocket(net.JoinHostPort(host, portStr))
		if err != nil {
			fmt.Fprintln(os.Stderr, "error resolving address:", err)
			os.Exit(1)
		}
		if framed {
			trans = thrift.NewTFramedTransport(trans)
		}
	}
	if err != nil {
		fmt.Fprintln(os.Stderr, "Error creating transport", err)
		os.Exit(1)
	}
	defer trans.Close()
	var protocolFactory thrift.TProtocolFactory
	switch protocol {
	case "compact":
		protocolFactory = thrift.NewTCompactProtocolFactory()
		break
	case "simplejson":
		protocolFactory = thrift.NewTSimpleJSONProtocolFactory()
		break
	case "json":
		protocolFactory = thrift.NewTJSONProtocolFactory()
		break
	case "binary", "":
		protocolFactory = thrift.NewTBinaryProtocolFactoryDefault()
		break
	default:
		fmt.Fprintln(os.Stderr, "Invalid protocol specified: ", protocol)
		Usage()
		os.Exit(1)
	}
	client := wire.NewBarClientFactory(trans, protocolFactory)
	if err := trans.Open(); err != nil {
		fmt.Fprintln(os.Stderr, "Error opening socket to ", host, ":", port, " ", err)
		os.Exit(1)
	}

	switch cmd {
	case "GetInfo":
		if flag.NArg()-1 != 0 {
			fmt.Fprintln(os.Stderr, "GetInfo requires 0 args")
			flag.Usage()
		}
		fmt.Print(client.GetInfo())
		fmt.Print("\n")
		break
	case "CreateUpload":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "CreateUpload requires 2 args")
			flag.Usage()
		}
		argvalue0 := []byte(flag.Arg(1))
		value0 := argvalue0
		arg41 := flag.Arg(2)
		mbTrans42 := thrift.NewTMemoryBufferLen(len(arg41))
		defer mbTrans42.Close()
		_, err43 := mbTrans42.WriteString(arg41)
		if err43 != nil {
			Usage()
			return
		}
		factory44 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt45 := factory44.GetProtocol(mbTrans42)
		containerStruct1 := wire.NewBarCreateUploadArgs()
		err46 := containerStruct1.ReadField2(jsProt45)
		if err46 != nil {
			Usage()
			return
		}
		argvalue1 := containerStruct1.Manifests
		value1 := argvalue1
		fmt.Print(client.CreateUpload(value0, value1))
		fmt.Print("\n")
		break
	case "UploadChunk":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "UploadChunk requires 3 args")
			flag.Usage()
		}
		argvalue0 := []byte(flag.Arg(1))
		value0 := wire.ID(argvalue0)
		arg48 := flag.Arg(2)
		mbTrans49 := thrift.NewTMemoryBufferLen(len(arg48))
		defer mbTrans49.Close()
		_, err50 := mbTrans49.WriteString(arg48)
		if err50 != nil {
			Usage()
			return
		}
		factory51 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt52 := factory51.GetProtocol(mbTrans49)
		argvalue1 := wire.NewDataInfo()
		err53 := argvalue1.Read(jsProt52)
		if err53 != nil {
			Usage()
			return
		}
		value1 := argvalue1
		argvalue2 := []byte(flag.Arg(3))
		value2 := argvalue2
		fmt.Print(client.UploadChunk(value0, value1, value2))
		fmt.Print("\n")
		break
	case "FinishUploadBlob":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "FinishUploadBlob requires 3 args")
			flag.Usage()
		}
		argvalue0 := []byte(flag.Arg(1))
		value0 := argvalue0
		argvalue1 := []byte(flag.Arg(2))
		value1 := wire.ID(argvalue1)
		arg57 := flag.Arg(3)
		mbTrans58 := thrift.NewTMemoryBufferLen(len(arg57))
		defer mbTrans58.Close()
		_, err59 := mbTrans58.WriteString(arg57)
		if err59 != nil {
			Usage()
			return
		}
		factory60 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt61 := factory60.GetProtocol(mbTrans58)
		containerStruct2 := wire.NewBarFinishUploadBlobArgs()
		err62 := containerStruct2.ReadField3(jsProt61)
		if err62 != nil {
			Usage()
			return
		}
		argvalue2 := containerStruct2.Tags
		value2 := argvalue2
		fmt.Print(client.FinishUploadBlob(value0, value1, value2))
		fmt.Print("\n")
		break
	case "FinishUpload":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "FinishUpload requires 1 args")
			flag.Usage()
		}
		argvalue0 := []byte(flag.Arg(1))
		value0 := argvalue0
		fmt.Print(client.FinishUpload(value0))
		fmt.Print("\n")
		break
	case "TagBlobs":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "TagBlobs requires 2 args")
			flag.Usage()
		}
		arg64 := flag.Arg(1)
		mbTrans65 := thrift.NewTMemoryBufferLen(len(arg64))
		defer mbTrans65.Close()
		_, err66 := mbTrans65.WriteString(arg64)
		if err66 != nil {
			Usage()
			return
		}
		factory67 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt68 := factory67.GetProtocol(mbTrans65)
		containerStruct0 := wire.NewBarTagBlobsArgs()
		err69 := containerStruct0.ReadField1(jsProt68)
		if err69 != nil {
			Usage()
			return
		}
		argvalue0 := containerStruct0.Ids
		value0 := argvalue0
		arg70 := flag.Arg(2)
		mbTrans71 := thrift.NewTMemoryBufferLen(len(arg70))
		defer mbTrans71.Close()
		_, err72 := mbTrans71.WriteString(arg70)
		if err72 != nil {
			Usage()
			return
		}
		factory73 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt74 := factory73.GetProtocol(mbTrans71)
		containerStruct1 := wire.NewBarTagBlobsArgs()
		err75 := containerStruct1.ReadField2(jsProt74)
		if err75 != nil {
			Usage()
			return
		}
		argvalue1 := containerStruct1.Tags
		value1 := argvalue1
		fmt.Print(client.TagBlobs(value0, value1))
		fmt.Print("\n")
		break
	case "UntagBlobs":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "UntagBlobs requires 2 args")
			flag.Usage()
		}
		arg76 := flag.Arg(1)
		mbTrans77 := thrift.NewTMemoryBufferLen(len(arg76))
		defer mbTrans77.Close()
		_, err78 := mbTrans77.WriteString(arg76)
		if err78 != nil {
			Usage()
			return
		}
		factory79 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt80 := factory79.GetProtocol(mbTrans77)
		containerStruct0 := wire.NewBarUntagBlobsArgs()
		err81 := containerStruct0.ReadField1(jsProt80)
		if err81 != nil {
			Usage()
			return
		}
		argvalue0 := containerStruct0.Ids
		value0 := argvalue0
		arg82 := flag.Arg(2)
		mbTrans83 := thrift.NewTMemoryBufferLen(len(arg82))
		defer mbTrans83.Close()
		_, err84 := mbTrans83.WriteString(arg82)
		if err84 != nil {
			Usage()
			return
		}
		factory85 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt86 := factory85.GetProtocol(mbTrans83)
		containerStruct1 := wire.NewBarUntagBlobsArgs()
		err87 := containerStruct1.ReadField2(jsProt86)
		if err87 != nil {
			Usage()
			return
		}
		argvalue1 := containerStruct1.Tags
		value1 := argvalue1
		fmt.Print(client.UntagBlobs(value0, value1))
		fmt.Print("\n")
		break
	case "IsBlobExists":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "IsBlobExists requires 1 args")
			flag.Usage()
		}
		arg88 := flag.Arg(1)
		mbTrans89 := thrift.NewTMemoryBufferLen(len(arg88))
		defer mbTrans89.Close()
		_, err90 := mbTrans89.WriteString(arg88)
		if err90 != nil {
			Usage()
			return
		}
		factory91 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt92 := factory91.GetProtocol(mbTrans89)
		containerStruct0 := wire.NewBarIsBlobExistsArgs()
		err93 := containerStruct0.ReadField1(jsProt92)
		if err93 != nil {
			Usage()
			return
		}
		argvalue0 := containerStruct0.Ids
		value0 := argvalue0
		fmt.Print(client.IsBlobExists(value0))
		fmt.Print("\n")
		break
	case "GetManifests":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetManifests requires 1 args")
			flag.Usage()
		}
		arg94 := flag.Arg(1)
		mbTrans95 := thrift.NewTMemoryBufferLen(len(arg94))
		defer mbTrans95.Close()
		_, err96 := mbTrans95.WriteString(arg94)
		if err96 != nil {
			Usage()
			return
		}
		factory97 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt98 := factory97.GetProtocol(mbTrans95)
		containerStruct0 := wire.NewBarGetManifestsArgs()
		err99 := containerStruct0.ReadField1(jsProt98)
		if err99 != nil {
			Usage()
			return
		}
		argvalue0 := containerStruct0.Ids
		value0 := argvalue0
		fmt.Print(client.GetManifests(value0))
		fmt.Print("\n")
		break
	case "FetchChunk":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "FetchChunk requires 2 args")
			flag.Usage()
		}
		argvalue0 := []byte(flag.Arg(1))
		value0 := wire.ID(argvalue0)
		arg101 := flag.Arg(2)
		mbTrans102 := thrift.NewTMemoryBufferLen(len(arg101))
		defer mbTrans102.Close()
		_, err103 := mbTrans102.WriteString(arg101)
		if err103 != nil {
			Usage()
			return
		}
		factory104 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt105 := factory104.GetProtocol(mbTrans102)
		argvalue1 := wire.NewChunk()
		err106 := argvalue1.Read(jsProt105)
		if err106 != nil {
			Usage()
			return
		}
		value1 := argvalue1
		fmt.Print(client.FetchChunk(value0, value1))
		fmt.Print("\n")
		break
	case "UploadSpec":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "UploadSpec requires 1 args")
			flag.Usage()
		}
		arg107 := flag.Arg(1)
		mbTrans108 := thrift.NewTMemoryBufferLen(len(arg107))
		defer mbTrans108.Close()
		_, err109 := mbTrans108.WriteString(arg107)
		if err109 != nil {
			Usage()
			return
		}
		factory110 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt111 := factory110.GetProtocol(mbTrans108)
		argvalue0 := wire.NewSpec()
		err112 := argvalue0.Read(jsProt111)
		if err112 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.UploadSpec(value0))
		fmt.Print("\n")
		break
	case "FetchSpec":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "FetchSpec requires 1 args")
			flag.Usage()
		}
		argvalue0 := []byte(flag.Arg(1))
		value0 := wire.ID(argvalue0)
		fmt.Print(client.FetchSpec(value0))
		fmt.Print("\n")
		break
	case "":
		Usage()
		break
	default:
		fmt.Fprintln(os.Stderr, "Invalid function ", cmd)
	}
}
